import { TypePersonne } from "../../constants.js";
import { db } from "../server.js";
import { typePersonneValidator } from "../validators/OtherValidators.js";

/**
 * Retrieves a list of persons from the database.
 *
 * @param {string|null} typePersonne - The type of person to filter the results by if not specified there will be no filtering. (optional)
 * @returns {Promise} A promise that resolves to an array of person objects.
 */
export const selectPersonnes = (typePersonne = null, id_groupe) => {
  let sql = `SELECT * FROM personne`;

  if (typePersonne === TypePersonne.Etudiant){
    sql = `SELECT  p.matricule, p.nom, p.prenom, p.email, p.password, p.type, p.anneebac, p.niveau,
                    g.id_groupe, g.code_groupe,
                    s.id_section, s.code_section, s.niveau, 
                    sp.code_specialite, sp.nom_specialite
          FROM personne p
              join groupe g on p.id_groupe = g.id_groupe
              join section s on g.id_section = s.id_section
              join specialite sp on s.code_specialite = sp.code_specialite`;
    }
  if (typePersonneValidator(typePersonne)) {
    sql += ` WHERE type = $1`;
  }
  if (id_groupe) {
    if(sql.includes('WHERE type')){
      sql += ` and p.id_groupe = $2`;
    }
    else{
      sql += ` WHERE p.id_groupe = $1`;
    }
  }
  return db.manyOrNone(sql, [typePersonne, id_groupe]);
};

/**
 * Retrieves a person from the database based on their matricule.
 *
 * @param {string} matricule - The matricule of the person to retrieve.
 * @returns {Promise<object|null>} A promise that resolves to the retrieved person object, or null if no person is found.
 */
export const selectPersonne = (matricule) => {
  return db.oneOrNone("SELECT * FROM personne WHERE matricule = $1", [
    matricule,
  ]);
};

/**
 * 
 * @param {email} email 
 * @returns {Promise<object|null>} 
 */


export const selectPersonneByEmail=(email)=>{
  return db.oneOrNone("SELECT * FROM personne WHERE email=$1 ",[email]);
}



/**
 * Inserts a person with a given matricule into the database.
 *
 * @param {string} matricule - The matricule of the person.
 * @param {string} nom - The name of the person.
 * @param {string} prenom - The surname of the person.
 * @param {string} email - The email of the person.
 * @param {string} password - The password of the person.
 * @param {string} type - The type of the person.
 * @param {string} role - The role of the person.
 * @param {string} anneeBac - The year of the person's baccalaureate.
 * @param {string} niveau - The level of the person.
 * @param {string} charges - The charges of the person.
 * @param {string} id_groupe - The ID of the group the person belongs to.
 * @param {string} code_specialite - The code of the person's specialty.
 * @returns {Promise} A promise that resolves to the result of the person.
 */
export const insertPersonneWithMatricule = (
  matricule,
  nom,
  prenom,
  email,
  password,
  type,
  role,
  anneeBac,
  niveau,
  charges,
  id_groupe,
  code_specialite
) => {
  return db.one(
    `INSERT INTO personne(matricule, nom, prenom, email, password, type, role, anneeBac, niveau, charges, id_groupe, code_specialite)
        VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12) RETURNING *`,
    [
      matricule,
      nom,
      prenom,
      email,
      password,
      type,
      role,
      anneeBac,
      niveau,
      charges,
      id_groupe,
      code_specialite,
    ]
  );
};

/**
 * Inserts a person into the database without specifiying a matricule.
 * (matricule will be generated by the database automatically)
 *
 * @param {string} nom - The person's last name.
 * @param {string} prenom - The person's first name.
 * @param {string} email - The person's email address.
 * @param {string} password - The person's hashed password.
 * @param {string} type - The person's type.
 * @param {string} role - The person's role.
 * @param {number} anneeBac - The person's year of graduation.
 * @param {string} niveau - The person's level.
 * @param {number} charges - The person's charges.
 * @param {number} id_groupe - The person's group ID.
 * @param {string} code_specialite - The person's specialty code.
 * @returns {Promise} A promise that resolves to the inserted person.
 */
export const insertPersonneWithoutMatricule = (
  nom,
  prenom,
  email,
  password,
  type,
  role,
  anneeBac,
  niveau,
  charges,
  id_groupe,
  code_specialite
) => {
  return db.one(
    `INSERT INTO personne(nom, prenom, email, password, type, role, anneeBac, niveau, charges, id_groupe, code_specialite)
        VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) RETURNING *`,
    [
      nom,
      prenom,
      email,
      password,
      type,
      role,
      anneeBac,
      niveau,
      charges,
      id_groupe,
      code_specialite,
    ]
  );
};

/**
 * Deletes a person from the database based on their matricule.
 *
 * @param {string} matricule - The matricule of the person to be deleted.
 * @returns {Promise} A promise that resolves when the deletion is successful.
 */
export const deletePersonne = (matricule) => {
  return db.none("DELETE FROM personne WHERE matricule = $1", [matricule]);
};

/**
 * Updates a person's information in the database.
 *
 * @param {string} matricule - The matricule of the person to update.
 * @param {string} nom - The updated name of the person.
 * @param {string} prenom - The updated surname of the person.
 * @param {string} email - The updated email of the person.
 * @param {string} password - The updated password of the person.
 * @param {string} type - The updated type of the person.
 * @param {string} role - The updated role of the person.
 * @param {string} anneeBac - The updated year of the person's baccalaureate.
 * @param {string} niveau - The updated level of the person.
 * @param {string} charges - The updated charges of the person.
 * @param {string} id_groupe - The updated group ID of the person.
 * @param {string} code_specialite - The updated specialty code of the person.
 * @returns {Promise} - A promise that resolves to the updated person's information.
 */
export const updatePersonne = (
  mat, // Nouveau matricule
  matricule, // Ancien matricule, nÃ©cessaire pour identifier l'enregistrement
  nom,
  prenom,
  email,
  password,
  type,
  role,
  anneeBac,
  niveau,
  charges,
  id_groupe,
  code_specialite
) => {
  return db.one(
    `UPDATE personne
     SET matricule=$1, nom=$2, prenom=$3, email=$4, password=$5, type=$6, role=$7,
         anneeBac=$8, niveau=$9, charges=$10, id_groupe=$11, code_specialite=$12
     WHERE matricule=$13 RETURNING *`,
    [
      mat, // Nouveau matricule
      nom,
      prenom,
      email,
      password,
      type,
      role,
      anneeBac,
      niveau,
      charges,
      id_groupe,
      code_specialite,
      matricule, // Ancien matricule
    ]
  );
};
